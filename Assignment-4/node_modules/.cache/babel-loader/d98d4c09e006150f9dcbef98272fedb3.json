{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});\nexport const fetchLeaders = () => dispatch => {\n  dispatch(leadersLoading(true));\n  return fetch(baseUrl + 'leaders').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error' + response.status + ':' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errorMessage = new Error(error.errorMessage);\n    throw errorMessage;\n  }).then(response => response.json()).then(leaders => dispatch(addLeaders(leaders))).catch(error => dispatch(leadersFailed(error.message)));\n};\nexport const leadersLoading = () => dispatch => ({\n  type: ActionTypes.LEADERS_LOADING\n});\nexport const leadersFailed = errmess => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\nexport const addLeaders = leaders => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n});\nexport const postFeedback = feedback => dispatch => {\n  const newFeedback = Object.assign({\n    date: new Date().toISOString()\n  }, feedback);\n  return fetch(baseUrl + 'feedback', {\n    method: 'POST',\n    body: JSON.stringify(newFeedback),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'same-origin'\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errorMessage = new Error(error.errorMessage);\n    throw errorMessage;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('Post feedback: ' + error.message);\n    alert('Feedback could not be posted:\\n' + error.message);\n  });\n};","map":{"version":3,"sources":["/home/saloni/Downloads/coursera/React/Assignment-4/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","json","catch","console","log","message","alert","fetchDishes","dishesLoading","errmess","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS","fetchLeaders","leadersLoading","errorMessage","leaders","addLeaders","leadersFailed","LEADERS_LOADING","LEADERS_FAILED","ADD_LEADERS","postFeedback","feedback","newFeedback","Object","assign"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\n\n\nexport const addComment = (comment) => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: comment\n});\n\nexport const postComment = (dishId, rating, author, comment) => (dispatch) => {\n\n    const newComment = {\n        dishId: dishId,\n        rating: rating,\n        author: author,\n        comment: comment\n    };\n    newComment.date = new Date().toISOString();\n    \n    return fetch(baseUrl + 'comments', {\n        method: \"POST\",\n        body: JSON.stringify(newComment),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        credentials: \"same-origin\"\n    })\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            throw error;\n      })\n    .then(response => response.json())\n    .then(response => dispatch(addComment(response)))\n    .catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\\nError: '+error.message); });\n};\n\n\n\nexport const fetchDishes = () => (dispatch) => {\n\n    dispatch(dishesLoading(true));\n\n    return fetch(baseUrl + 'dishes')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(dishes => dispatch(addDishes(dishes)))\n    .catch(error => dispatch(dishesFailed(error.message)));\n}\n\n\nexport const dishesLoading = () => ({\n    type: ActionTypes.DISHES_LOADING\n});\n\nexport const dishesFailed = (errmess) => ({\n    type: ActionTypes.DISHES_FAILED,\n    payload: errmess\n});\n\nexport const addDishes = (dishes) => ({\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n});\n\nexport const fetchComments = () => (dispatch) => {    \n    return fetch(baseUrl + 'comments')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n};\n\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\nexport const fetchPromos = () => (dispatch) => {\n    \n    dispatch(promosLoading());\n\n    return fetch(baseUrl + 'promotions')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(promos => dispatch(addPromos(promos)))\n    .catch(error => dispatch(promosFailed(error.message)));\n}\n\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});\n\nexport const fetchLeaders=()=>(dispatch)=>{\n  dispatch(leadersLoading(true));\n\n  return fetch(baseUrl+'leaders')\n    .then(response=>{\n      if(response.ok){\n        return response;\n      } else{\n        var error=new Error('Error' + response.status+':' + response.statusText);\n        error.response=response;\n        throw error;\n      }\n    },\n    error=>{\n      var errorMessage=new Error(error.errorMessage);\n      throw errorMessage;\n    }\n    )\n        .then(response => response.json())\n        .then(leaders => dispatch(addLeaders(leaders)))\n        .catch(error => dispatch(leadersFailed(error.message)))\n\n}\n\nexport const leadersLoading = () => (dispatch) => ({\n  type: ActionTypes.LEADERS_LOADING\n});\n\nexport const leadersFailed = (errmess) => ({\n  type: ActionTypes.LEADERS_FAILED,\n  payload: errmess\n});\n\nexport const addLeaders = (leaders) => ({\n  type: ActionTypes.ADD_LEADERS,\n  payload: leaders\n}); \nexport const postFeedback = (feedback) => (dispatch) => {\n  const newFeedback = Object.assign({ date: new Date().toISOString() }, feedback);\n  \n  return fetch(baseUrl + 'feedback', {\n      method: 'POST',\n      body: JSON.stringify(newFeedback),\n      headers: {\n          'Content-Type': 'application/json'\n      },\n      credentials: 'same-origin'\n  })\n      .then(response => {\n          if (response.ok) {\n              return response;\n          } else {\n              var error = new Error('Error ' + response.status + ': ' + response.statusText);\n              error.response = response;\n\n              throw error;\n          }\n      },\n          error => {\n              var errorMessage = new Error(error.errorMessage);\n              throw errorMessage;\n          }\n      )\n      .then(response => response.json())\n      .then(response => dispatch(addComment(response)))\n      .catch(error => {\n          console.log('Post feedback: ' + error.message);\n          alert('Feedback could not be posted:\\n' + error.message)\n      })\n};"]},"metadata":{},"sourceType":"module"}